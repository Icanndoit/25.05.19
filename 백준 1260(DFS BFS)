#include<iostream>
#include<queue>
using namespace std;
// https://blog.naver.com/hyejin_830/221321840204 (참고 자료)

int graph[1001][1001] = { 0 };  // 그래프(인접 행렬)
int DFSvisit[1001] = { 0 };
int BFSvisit[1001] = { 0 };

void DFS(int v, int n) {  // 시작 정점, 정점의 개수
	DFSvisit[v] = 1;  // 방문한 노드는 1로 변경
	cout << v << ' ';

	for (int i = 1; i <= n; i++) {
		if (graph[v][i] == 0 || DFSvisit[i] == 1)  // 간선이 없거나 or 방문한 적이 있을시
			continue;
		DFS(i, n);
	}
}

void BFS(int v, int n) {  // 시작 정점, 정점의 개수
	queue<int>Queue;

	Queue.push(v);
	BFSvisit[v] = 1;
	while (!Queue.empty()) {
		v = Queue.front();
		cout << Queue.front() << ' ';
		Queue.pop();
		for (int i = 1; i <= n; i++) {
			if (graph[v][i] == 1 && BFSvisit[i] == 0)
			{
				Queue.push(i);
				BFSvisit[i] = 1;
			}
		}
	}
}

int main() {
	int n, m, v;  // 정점의 개수, 간선의 개수, 시작 정점
	cin >> n >> m >> v;

	for (int i = 1; i <= m; i++) {
		int a, b;
		cin >> a >> b;
		if (a != b)
			graph[a][b] = graph[b][a] = 1;
	}

	DFS(v, n);  // 시작 정점, 정점의 개수
	cout << "\n";
	BFS(v, n);  // 시작 정점, 정점의 개수

	return 0;
}
